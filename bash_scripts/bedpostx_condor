#!/bin/sh

#   Copyright (C) 2004,2013 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#
#
#   LICENCE
#
#   FMRIB Software Library, Release 5.0 (c) 2012, The University of
#   Oxford (the "Software")
#
#   The Software remains the property of the University of Oxford ("the
#   University").
#
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/9564.
#
#
#   FOR AUTOMATICAL CPU PARALELIZATION ON CODNOR-BASED GRID
#   To condor_submit_dag format modified and implemented Rene Labounek
#   Last modification: Friday 18. March 2016
#   IMPORTANT: Make sure that next line corresponds with your fsl instalation!!!
#              FSLINIT=". /etc/fsl/5.0/fsl.sh"
#              It sets fsl variables to be known in terminals opened by condor.

# This is adjusted version of original FSL bedpostx function allowing paralel
# CPU run using HTCondor.
# Rene Labounek, fMRI laboratory Olomouc, Czech Republic, 2017-2020

export LC_ALL=C

Usage() {
    echo ""
    echo "Usage: bedpostx <subject directory> [options]"
    echo ""
    echo "expects to find bvals and bvecs in subject directory"
    echo "expects to find data and nodif_brain_mask in subject directory"
    echo "expects to find grad_dev in subject directory, if -g is set"
    echo "options (old syntax)"
    echo "-n (number of fibres per voxel, default 3)"
    echo "-w (ARD weight, more weight means less secondary fibres per voxel, default 1)"
    echo "-b (burnin period, default 1000)"
    echo "-j (number of jumps, default 1250)"
    echo "-s (sample every, default 25)"
    echo "-model (Deconvolution model. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins)"
    echo "-g (consider gradient nonlinearities, default off)"
    #echo "-c do not use CUDA capable hardware/queue (if found)"
    echo ""
    echo ""
    echo "ALTERNATIVELY: you can pass on xfibres options onto directly bedpostx"
    echo " For example:  bedpostx <subject directory> --noard --cnonlinear"
    echo " Type 'xfibres --help' for a list of available options "
    echo " Default options will be bedpostx default (see above), and not xfibres default."
    echo ""
    echo "Note: Use EITHER old OR new syntax."
    exit 1
}

monitor(){
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
echo
echo "----- Bedpostx Monitor -----"
finished=0
lastprinted=0
havedad=2
while [ \$finished -eq 0 ] ; do
    nfin=0
    slice=0
    errorFiles=\`ls ${subjdir}.bedpostX/logs/*.e* 2> /dev/null \`
    for errorFile in \$errorFiles
    do
        if [ -s \$errorFile ]; then
            echo An error ocurred. Please check file \$errorFile
            kill -9 $$
            exit 1
        fi
    done
    while [ \$slice -le $nslices ];do
        if [ -e ${subjdir}.bedpostX/logs/monitor/\$slice ]; then
            nfin=\$((\$nfin + 1))
        fi
        slice=\$((\$slice + 1))
    done
    newmessages=\$((\$nfin - \$lastprinted))
    while [ "\$newmessages" -gt 0 ];do
        lastprinted=\$((\$lastprinted + 1))
        echo \$lastprinted slices processed out of $nslices
        newmessages=\$((\$newmessages - 1))
    done
    if [ -f ${subjdir}.bedpostX/xfms/eye.mat ] ; then
        finished=1
        echo "All slices processed"
	exit
    fi
    if [ ! \$havedad -gt 0 ]; then
       exit 0
    fi
    if [ "x$SGE_ROOT" = "x" ]; then
        havedad=\`ps -e -o pid 2>&1 | grep "$$\\b" | wc -l\`
    fi
    sleep 180;
done
EOM
    chmod +x ${subjdir}.bedpostX/monitor
}

make_absolute(){
    dir=$1;
    if [ -d ${dir} ]; then
	OLDWD=`pwd`
	cd ${dir}
	dir_all=`pwd`
	cd $OLDWD
    else
	dir_all=${dir}
    fi
    echo ${dir_all}
}

[ "$1" = "" ] && Usage

myopts="$@"
subjdir=`make_absolute $1`
subjdir=`echo $subjdir | sed 's/\/$/$/g'`

#parse option arguments
nfibres=3
fudge=1
burnin=1000
njumps=1250
sampleevery=25
model=2
gflag=0
nocuda=0
other=""
prio=0
peel=1
SUBID=notset
SL=0

shift
while [ ! -z "$1" ]
do
  case "$1" in
      -n) nfibres=$2;shift;;
      -w) fudge=$2;shift;;
      -b) burnin=$2;shift;;
      -j) njumps=$2;shift;;
      -s) sampleevery=$2;shift;;
      -model) model=$2;shift;;
	  -prio) prio=$2;shift;;
	  -peel) peel=$2;shift;;
	  -subjid) SUBID=$2;shift;;
	  -sl) SL=$2;shift;;
      -g) gflag=1;;
      -c) nocuda=1;;
      *) other=$other" "$1;;
  esac
  shift
done

opts="--nf=$nfibres --fudge=$fudge --bi=$burnin --nj=$njumps --se=$sampleevery --model=$model"
defopts="--cnonlinear"
opts="$opts $defopts $other"
if [ -n "$SGE_ROOT" ]; then
	# Look for an SGE queue
	if [ -n "$FSLGECUDAQ" -a "$nocuda" -eq 0 ]; then
		# Test that the queue exists
		qconf -sq $FSLGECUDAQ 2>&1 >/dev/null
		if [ $? -eq 0 ]; then
			# CUDA queue exists
			if [ -x $0_gpu ]; then
				exec $0_gpu $myopts
			fi
		fi
	fi
fi

echo subjectdir is $subjdir

#check that all required files exist
if [ $peel -ne 2 ];then

	if [ ! -d $subjdir ]; then
		echo "subject directory $1 not found"
		exit 1
	fi

	if [ ! -e ${subjdir}/bvecs ]; then
		if [ -e ${subjdir}/bvecs.txt ]; then
		mv ${subjdir}/bvecs.txt ${subjdir}/bvecs
		else
		echo "${subjdir}/bvecs not found"
		exit 1
		fi
	fi

	if [ ! -e ${subjdir}/bvals ]; then
		if [ -e ${subjdir}/bvals.txt ]; then
		mv ${subjdir}/bvals.txt ${subjdir}/bvals
		else
		echo "${subjdir}/bvals not found"
		exit 1
		fi
	fi

	if [ `${FSLDIR}/bin/imtest ${subjdir}/data` -eq 0 ]; then
		echo "${subjdir}/data not found"
		exit 1
	fi

	if [ ${gflag} -eq 1 ]; then
		if [ `${FSLDIR}/bin/imtest ${subjdir}/grad_dev` -eq 0 ]; then
		echo "${subjdir}/grad_dev not found"
		exit 1
		fi
	fi

	if [ `${FSLDIR}/bin/imtest ${subjdir}/nodif_brain_mask` -eq 0 ]; then
		echo "${subjdir}/nodif_brain_mask not found"
		exit 1
	fi

	if [ -e ${subjdir}.bedpostX/xfms/eye.mat ]; then
		echo "${subjdir} has already been processed: ${subjdir}.bedpostX."
		echo "Delete or rename ${subjdir}.bedpostX before repeating the process."
		exit 1
	fi
fi
echo Making bedpostx directory structure

mkdir -p ${subjdir}.bedpostX/
mkdir -p ${subjdir}.bedpostX/diff_slices
mkdir -p ${subjdir}.bedpostX/logs
mkdir -p ${subjdir}.bedpostX/logs/monitor
mkdir -p ${subjdir}.bedpostX/xfms

# This setting is already present in fsl_sub and allows for a more flexible,
# centralized configuration
#mailto=`whoami`@fmrib.ox.ac.uk
if [ $peel -eq 1 ];then
	echo Queuing preprocessing stages
	# don't setup email options, rely on fsl_sub's setting
	#preprocid=`${FSLDIR}/bin/fsl_sub -T 60 -m as -N bpx_preproc -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc.sh ${subjdir} ${gflag}`
	preprocid=`${FSLDIR}/bin/fsl_sub -T 60 -N bpx_preproc -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc.sh ${subjdir} ${gflag}`
else
	echo "${FSLDIR}/bin/fsl_sub -T 60 -N bpx_preproc -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc.sh ${subjdir} ${gflag}" > ${subjdir}.bedpostX/preproc_command.txt
fi

echo Queuing parallel processing stage
if [ $SL -eq 0 ];then
	nslices=`${FSLDIR}/bin/fslval ${subjdir}/data dim3`
else
	nslices=$SL
fi
[ -f ${subjdir}.bedpostX/commands.txt ] && rm ${subjdir}.bedpostX/commands.txt

#monitor
# Don't be SGE-specific -- rely on FSLPARALLEL
#if [ "x$FSLPARALLEL" = "x" ]; then
#    ${subjdir}.bedpostX/monitor&
#fi

slice=0
while [ $slice -lt $nslices ]
do
    slicezp=`$FSLDIR/bin/zeropad $slice 4`
    if [ `$FSLDIR/bin/imtest ${subjdir}.bedpostX/diff_slices/data_slice_$slicezp/dyads1` -eq 1 ] && [ -f ${subjdir}.bedpostX/logs/monitor/$slice ];then
	echo "slice $slice has already been processed"
    else
        [ -f ${subjdir}.bedpostX/logs/monitor/$slice ] && rm ${subjdir}.bedpostX/logs/monitor/$slice
	if [ ${gflag} -eq 1 ]; then
	    gopts="$opts --gradnonlin=${subjdir}/grad_dev_slice_${slicezp}"
	else
	    gopts=$opts
	fi
	echo "${FSLDIR}/bin/bedpostx_single_slice.sh ${subjdir} ${slice} $gopts" \
	    >> ${subjdir}.bedpostX/commands.txt
    fi
    slice=$(($slice + 1))
done

#FSLINIT=". /etc/fsl/5.0/fsl.sh"
FSLINIT1="export PATH=$PATH:/usr/local/fsl/bin"
FSLINIT2="export FSLDIR=/usr/local/fsl"
FSLINIT3=". ${FSLDIR}/etc/fslconf/fsl.sh"

SLICE=0
mkdir $subjdir.bedpostX/condor_logs
DAGFILE=$subjdir.bedpostX/condor_logs/bedpostx_condor.dag
if [ "$SUBID" = "notset" ];then
	DAGJOBFILE=$subjdir.bedpostX/condor_logs/bedpostx_postproc_condor
else
	DAGJOBFILE=$subjdir.bedpostX/condor_logs/${SUBID}-bedpostx_postproc_condor
fi
DAGJOBNAME=bedpostx_postproc_condor
TEMPFILE=$subjdir.bedpostX/condor_logs/bedpostx_condor.dag.temp
TEMPFILE2=$subjdir.bedpostX/condor_logs/bedpostx_condor.dag.temp2

while read line; do
	SLICETEXT=slice_`printf %04d $SLICE`
	if [ "$SUBID" = "notset" ]; then
		CONDORFILE=$subjdir.bedpostX/condor_logs/slice_`printf %04d $SLICE`
	else
		CONDORFILE=$subjdir.bedpostX/condor_logs/${SUBID}-slice_`printf %04d $SLICE`
	fi

	echo "#!/bin/sh" > $CONDORFILE.sh
	#echo $FSLINIT >> $CONDORFILE.sh
	echo $FSLINIT1 >> $CONDORFILE.sh
	echo $FSLINIT2 >> $CONDORFILE.sh
	echo $FSLINIT3 >> $CONDORFILE.sh
	echo "nice -n 20 $line" >> $CONDORFILE.sh
	chmod 770 $CONDORFILE.sh

	echo "Executable = $CONDORFILE.sh" > $CONDORFILE.condor
	echo "Universe = vanilla" >> $CONDORFILE.condor
	#echo "input = test.data" >> $CONDORFILE.condor
	echo "Output = $CONDORFILE.out" >> $CONDORFILE.condor
	echo "Error = $CONDORFILE.error" >> $CONDORFILE.condor
	echo "Log   = $CONDORFILE.log" >> $CONDORFILE.condor
	echo "Queue" >> $CONDORFILE.condor
	chmod 660 $CONDORFILE.condor

	#CONDOROUT=`condor_submit $CONDORFILE.condor`
	#echo $CONDOROUT > $CONDORFILE.txt
	#grep -E -o "cluster [0-9]+" $CONDORFILE.txt | sed -e "s/cluster //" >> $subjdir.bedpostX/condor_logs/active_condorIDs.txt
	#cat $CONDORFILE.txt

	if [ "$SLICE" -eq 0 ]; then
		echo "JOB $SLICETEXT $CONDORFILE.condor" > $DAGFILE
        echo "PARENT $SLICETEXT CHILD $DAGJOBNAME" > $TEMPFILE
		echo "PRIORITY $SLICETEXT $prio" > $TEMPFILE2
	else
		echo "JOB $SLICETEXT $CONDORFILE.condor" >> $DAGFILE
        echo "PARENT $SLICETEXT CHILD $DAGJOBNAME" >> $TEMPFILE
		echo "PRIORITY $SLICETEXT $prio" >> $TEMPFILE2
	fi
	#echo "JOB $SLICETEXT $CONDORFILE.condor" >> $DAGFILE
	#echo "PARENT $SLICETEXT CHILD $DAGJOBNAME" >> $TEMPFILE

	SLICE=$(($SLICE + 1))
done < $subjdir.bedpostX/commands.txt

echo "JOB $DAGJOBNAME $DAGJOBFILE.condor" >> $DAGFILE

if [ $peel -eq 1 ];then
	cat $TEMPFILE >> $DAGFILE
	cat $TEMPFILE2 >> $DAGFILE
	rm $TEMPFILE
	rm $TEMPFILE2
	echo "PRIORITY $DAGJOBNAME $prio" >> $DAGFILE
else
	echo "PRIORITY $DAGJOBNAME $prio" >> $TEMPFILE2
fi
chmod 660 $DAGFILE

echo "#!/bin/sh" > $DAGJOBFILE.sh
#echo $FSLINIT  >> $DAGJOBFILE.sh
echo $FSLINIT1 >> $DAGJOBFILE.sh
echo $FSLINIT2 >> $DAGJOBFILE.sh
echo $FSLINIT3 >> $DAGJOBFILE.sh
echo "nice -n 20 bedpostx_postproc.sh $subjdir" >> $DAGJOBFILE.sh
chmod 770 $DAGJOBFILE.sh

echo "Executable = $DAGJOBFILE.sh" > $DAGJOBFILE.condor
echo "Universe = vanilla" >> $DAGJOBFILE.condor
#echo "input = test.data" >> $DAGJOBFILE.condor
echo "Output = $DAGJOBFILE.out" >> $DAGJOBFILE.condor
echo "Error = $DAGJOBFILE.error" >> $DAGJOBFILE.condor
echo "Log   = $DAGJOBFILE.log" >> $DAGJOBFILE.condor
echo "Queue" >> $DAGJOBFILE.condor
chmod 660 $DAGJOBFILE.condor

if [ $peel -eq 1 ];then
	condor_submit_dag $DAGFILE
fi
